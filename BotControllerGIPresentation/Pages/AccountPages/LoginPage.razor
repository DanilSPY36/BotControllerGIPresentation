@page "/login"
@inject AuthenticationStateProvider AuthStateProvider
<RadzenTemplateForm Data="@LoginUser" Submit="@((UserLoginDto args) => { Submit(args); })" Style="display: flex; justify-content: center; align-items: center; height: 80vh;">
    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" Style="width: 800px;"> 
        <RadzenCard>
            <RadzenFieldset Text="Данные аккаунта">
                <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" Gap="1rem" >
                    <RadzenFormField Text="Почта" Variant="Variant.Outlined">
                        <Start>
                            <RadzenIcon Icon="account_circle" />
                        </Start>
                        <ChildContent>
                            <RadzenTextBox @bind-Value=@LoginUser.Email></RadzenTextBox>
                        </ChildContent>
                    </RadzenFormField>
                    <RadzenFormField Text="Password" Variant="Variant.Outlined">
                        <ChildContent>
                            <RadzenTextBox @bind-Value="@passwordValue" Visible="@(!passwordVisable)" />
                            <RadzenPassword @bind-Value="@passwordValue" Visible="@passwordVisable" />
                        </ChildContent>
                        <End>
                            <RadzenButton Icon="@(passwordVisable ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                        </End>
                    </RadzenFormField>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenCard>
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Dark"
        Style="min-width: 200px;" Variant="Variant.Outlined" Icon="save" Text="Зарегистрироваться" />
    </RadzenStack>
</RadzenTemplateForm>

@code 
{
    private UserLoginDto LoginUser { get; set; } = new();

    private string passwordValue { get; set; } = string.Empty;
    private bool passwordVisable { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
    }

    private void TogglePassword()
    {
        passwordVisable = !passwordVisable;
    }


    private async void Submit(UserLoginDto loginUser)
    {
        loginUser.Password = passwordValue;
        var res = await UserService.Login(loginUser);
        if(!string.IsNullOrEmpty(res))
        {
            await AuthStateProvider.GetAuthenticationStateAsync();
        }
    }
}
