@page "/signup"

<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="height: 80vh; width: 100%">
    <RadzenCard Style="width: 500px;">
        <RadzenFieldset Text="Регистрация аккаунта">
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="1rem">
                <RadzenFormField Text="Имя" Variant="Variant.Outlined" Style="width:100%;">
                    <End>
                        <RadzenIcon Icon="account_circle" />
                    </End>
                    <ChildContent>
                        <RadzenTextBox Name="Name" @bind-Value=@RegisterUserDto.UserName></RadzenTextBox>
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Почта" Variant="Variant.Outlined" Style="width:100%;">
                    <End>
                        <RadzenIcon Icon="alternate_email" />
                    </End>
                    <ChildContent>
                        <RadzenTextBox @bind-Value=@RegisterUserDto.Email></RadzenTextBox>
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Пароль" Variant="Variant.Outlined" Style="width:100%;">
                    <ChildContent>
                        <RadzenTextBox Name="Password" @bind-Value="@passwordValue" Visible="@(!passwordVisable)" />
                        <RadzenPassword Name="RepitPassword" @bind-Value="@passwordValue" Visible="@passwordVisable" />
                    </ChildContent>
                    <End>
                        <RadzenButton Icon="@(passwordVisable ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                    </End>
                </RadzenFormField>
                <RadzenFormField Text="Повторите пароль" Variant="Variant.Outlined" Style="width:100%;">
                    <ChildContent>
                        <RadzenTextBox Name="Password" @bind-Value="@repitPasswordValue" Visible="@(!repitPasswordVisable)" />
                        <RadzenPassword Name="RepitPassword" @bind-Value="@repitPasswordValue" Visible="@repitPasswordVisable" />
                    </ChildContent>
                    <End>
                        <RadzenButton Icon="@(repitPasswordVisable ? "visibility" : "visibility_off")" Click="TogglePasswordRepit" Variant="Variant.Text" Size="ButtonSize.Small" />
                    </End>
                </RadzenFormField>
                <RadzenButton IsBusy=@submitButtonIsBusy BusyText="Поиск пользователя" Click="@Submit" ButtonType="ButtonType.Submit" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" Style="width: 200px;" Variant="Variant.Outlined" Icon="login" Text="Зарегистрироваться" />
                <RadzenLink Icon="account_circle" Path="login" Text="у меня есть аккаунт" IconColor="@Colors.Info" Style="color: #076791; text-align:center; margin-top: -15px;" />
            </RadzenStack>
        </RadzenFieldset>
    </RadzenCard>
    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="width: 100%; margin-top: 40px;">
        <RadzenAlert Visible="@alertVisible" AllowClose="false" AlertStyle="AlertStyle.Danger" Variant="Variant.Filled" Shade="Shade.Lighter" Style="position: fixed; width: 500px;">
            @AlertText
        </RadzenAlert>
    </RadzenStack>
</RadzenStack>



@code
{
    private UserRegisterDto RegisterUserDto { get; set; } = new();


    private bool submitButtonIsBusy { get; set; } = false;


    private string passwordValue { get; set; } = string.Empty;
    private bool passwordVisable { get; set; } = true;
    private bool alertVisible { get; set; } = false;
    private string AlertText { get; set; } = string.Empty;

    private string repitPasswordValue { get; set; } = string.Empty;
    private bool repitPasswordVisable { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
    }

    private void TogglePassword()
    {
        passwordVisable = !passwordVisable;
    }
    private void TogglePasswordRepit()
    {
        repitPasswordVisable = !repitPasswordVisable;
    }

    private async Task GoToLoginPage()
    {
        NavigationManager.NavigateTo("/login", false);
    }

    private async Task Submit(UserRegisterDto registerUser)
    {
        RegisterUserDto.Password = passwordValue;
        var token = await UserService.Register(registerUser);
    }
    private async Task Submit()
    {
        if (string.IsNullOrEmpty(RegisterUserDto.UserName))
        {
            SetAlert("Необходимо ввести имя пользователя.");
            StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(RegisterUserDto.Email))
        {
            SetAlert("Необходимо ввести название почты.");
            StateHasChanged();
            return;
        }

        if (!IsValidEmail(RegisterUserDto.Email))
        {
            SetAlert("Некорректный адрес электронной почты.");
            StateHasChanged();
            return;
        }
        else
        {
            var response = await UserService.CheckUserEmail(RegisterUserDto.Email);
            if (!response)
            {
                SetAlert("Адрес электронной почты уже занят.");
                StateHasChanged();
                return;
            }
        }

        if (string.IsNullOrEmpty(passwordValue))
        {
            SetAlert("Необходимо ввести пароль.");
            StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(repitPasswordValue))
        {
            SetAlert("Необходимо повторно ввести пароль.");
            StateHasChanged();
            return;
        }

        if (passwordValue != repitPasswordValue)
        {
            SetAlert("Пароли не совпадают.");
            StateHasChanged();
            return;
        }

        if (!IsValidPassword(passwordValue))
        {
            SetAlert("Пароль должен быть более 5 символов, содержать заглавные буквы и цифры.");
            StateHasChanged();
            return;
        }
        RegisterUserDto.Password = passwordValue;
        var token = await UserService.Register(RegisterUserDto);
        alertVisible = false;
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/", false);
    }

    private void SetAlert(string message)
    {
        AlertText = message;
        alertVisible = true;
    }

    private bool IsValidEmail(string email)
    {
        var emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
        return System.Text.RegularExpressions.Regex.IsMatch(email, emailPattern);
    }
    private bool IsValidPassword(string password)
    {
        var passwordPattern = @"^(?=.*[A-Z])(?=.*[0-9]).{6,}$";
        return System.Text.RegularExpressions.Regex.IsMatch(password, passwordPattern);
    }
}
