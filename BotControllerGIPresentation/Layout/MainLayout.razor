@inherits LayoutComponentBase
@attribute [Authorize]

<HeadContent>
    <RadzenTheme Theme="material" />
</HeadContent>

<RadzenLayout>
    <RadzenHeader Style="background-color:aliceblue;">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="0">
            <AuthorizeView>
                <Authorized>
                    <RadzenSidebarToggle Style="color:black" Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                    <RadzenProfileMenu Style="background-color: aliceblue; color: black;">
                        <Template>
                            <RadzenImage Path="images/notFoundUser.png" Style="width: 32px;height: 32px;" class="rz-border-radius-10" />
                        </Template>
                        <ChildContent>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center" Style="width: 100%; height: 100%;">
                                <RadzenButton Text="Профиль" Icon="account_circle" Click="@OnMyProfileClick" Variant="Variant.Text" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.ExtraSmall" Style="width: 100%; text-transform: none; border-radius: 0px;"></RadzenButton>
                                <RadzenButton Text="Настройки" Icon="settings" Click="@OnSettingsClick" Variant="Variant.Text" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.ExtraSmall" Style="width: 100%; text-transform: none; border-radius: 0px;"></RadzenButton>
                                <RadzenButton Text="Выход" Icon="logout" Click="@OnLogoutClick" Variant="Variant.Text" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.ExtraSmall" Style="width: 100%; text-transform: none; border-radius: 0px;"></RadzenButton>
                            </RadzenStack>
                        </ChildContent>
                    </RadzenProfileMenu>
                </Authorized>
                <NotAuthorized>
                    <RadzenLabel Text="GrapeIntegration" Style="color:black;" />
                    <RadzenProfileMenu Style="background-color: aliceblue; color: black;">
                        <Template>
                            <RadzenImage Path="images/notFoundUser.png" Style="width: 32px;height: 32px;" class="rz-border-radius-10" />
                        </Template>
                        <ChildContent>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center" Style="width: 100%; height: 100%;">
                                <RadzenButton Text="Войти" Icon="login" Click="@OnLogin" Variant="Variant.Text" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.ExtraSmall" Style="width: 100%; text-transform: none; border-radius: 0px;"></RadzenButton>
                                <RadzenButton Text="Регистрация" Icon="person_add" Click="@OnRegister" Variant="Variant.Text" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.ExtraSmall" Style="width: 100%; text-transform: none; border-radius: 0px;"></RadzenButton>
                            </RadzenStack>
                        </ChildContent>
                    </RadzenProfileMenu>
                </NotAuthorized>
            </AuthorizeView>
        </RadzenStack>

    </RadzenHeader>
    <AuthorizeView>
        <Authorized>
            <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
                <RadzenPanelMenu>
                    <RadzenPanelMenuItem Text="Home" Icon="home" Path="/" />
                    <RadzenPanelMenuItem Text="Users" Icon="account_box" Path="/weather" />
                    <RadzenPanelMenuItem Text="ТТК" Icon="account_box" Path="/ttkTable" />
                </RadzenPanelMenu>
            </RadzenSidebar>
        </Authorized>
    </AuthorizeView>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
</RadzenLayout>


@code {
    private UserLoginDto? userLoginDto { get; set; }
    bool sidebar1Expanded = true;



    protected override async Task OnInitializedAsync()
    {

    }

    private void OnLogin()
    {
        NavigationManager.NavigateTo("/login", false);
    }
    private void OnRegister()
    {
        NavigationManager.NavigateTo("/signup", false);
    }

    private void OnMyProfileClick()
    {
        NavigationManager.NavigateTo("/myProfile", false);

    }

    private void OnSettingsClick()
    {
        NavigationManager.NavigateTo("/settings", false);

    }

    private async Task OnLogoutClick()
    {
        var result = await UserService.Logout();
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/", false);
    }
}